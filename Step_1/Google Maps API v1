import csv
import requests
import time

# Define the endpoint URL
endpoint_url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
place_details_url = "https://maps.googleapis.com/maps/api/place/details/json"

# Define the locations for the search (You can add more locations to the list)
locations = [
    "52.07667, 4.29861",
"52.09083, 5.12222",
"51.55551, 5.0913"
]

# Define the parameters for the search
params = {
    "radius": "20000",  # Search radius in meters (smaller radius)
    "keyword": "electric vehicle charging station",
    "key": "API KEY",  # Replace with your actual API key
}


# Function to extract address components
def extract_address_component(components, target_type):
    for component in components:
        if target_type in component["types"]:
            return component["long_name"]
    return "N/A"


# Loop through the locations and perform a search for each location
for index, location in enumerate(locations):
    params["location"] = location
    response = requests.get(endpoint_url, params=params)

    # Initialize the charging_stations list for the current location
    charging_stations = []

    while True:
        for result in response.json()["results"]:
            name = result["name"]
            lat = result["geometry"]["location"]["lat"]
            lng = result["geometry"]["location"]["lng"]
            rating = result.get("rating", "N/A")
            address = result.get("formatted_address", "N/A")
            reviews = result.get("reviews", [])
            ratings_total = result.get("user_ratings_total", [])

            # Get place details to obtain additional information
            place_id = result["place_id"]
            details_params = {
                "place_id": place_id,
                "key": params["key"],
                "fields": "address_component,formatted_phone_number,website,opening_hours",
            }
            details_response = requests.get(place_details_url, params=details_params)
            address_components = details_response.json()["result"]["address_components"]

            postal_code = extract_address_component(address_components, "postal_code")
            street_number = extract_address_component(address_components, "street_number")
            route = extract_address_component(address_components, "route")
            locality = extract_address_component(address_components, "locality")
            admin_area_level_1 = extract_address_component(address_components, "administrative_area_level_1")
            admin_area_level_2 = extract_address_component(address_components, "administrative_area_level_2")
            country = extract_address_component(address_components, "country")

            phone_number = details_response.json()["result"].get("formatted_phone_number", "N/A")
            website = details_response.json()["result"].get("website", "N/A")
            opening_hours = details_response.json()["result"].get("opening_hours", {}).get("weekday_text", "N/A")

            charging_stations.append((name, lat, lng, address, rating, reviews, ratings_total, postal_code,
                                      street_number, route, locality, admin_area_level_1, admin_area_level_2, country,
                                      phone_number, website, opening_hours))

        next_page_token = response.json().get("next_page_token", None)
        if not next_page_token:
            break

        time.sleep(2)
        params["pagetoken"] = next_page_token
        response = requests.get(endpoint_url, params=params)

    # Save the list of charging station data to a CSV file for the current location
    with open(f"charging_stations_gmaps_{index}.csv", "w", newline="") as csv_file:
        writer = csv.writer(csv_file, delimiter=";")
        writer.writerow(
            ["Name", "Latitude", "Longitude", "Address", "Rating", "Reviews", "Ratings Total", "Postal Code",
             "Street Number", "Route", "Locality", "Admin Area Level 1", "Admin Area Level 2", "Country",
             "Phone Number", "Website", "Opening Hours"])
        writer.writerows(charging_stations)

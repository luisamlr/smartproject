#################################################################
#### Smart Project: OpenStreet Map API - Current EV Chargers ####
#################################################################

"""This Python script performs a series of tasks to gather, process, and store information related to nearby
amenities around EV chargers. The input file is generated by the information from Google Maps, filtering only
the charging stations with reviews."""

# Import necessary libraries
import pandas as pd
import overpy
import chardet

# Define the path of the CSV file
file_path = 'All_Chargers.csv'

# Detect the encoding of the file
rawdata = open(file_path, 'rb').read()
result = chardet.detect(rawdata)
encoding = result['encoding']

# Read the file with the detected encoding
df = pd.read_csv(file_path, encoding=encoding)

# Filter rows where 'Ratings Total' is greater than 0
df = df[df['Ratings.Total'] > 0]

# Extract the coordinates from the DataFrame
coordinates = df[['Latitude', 'Longitude']].values.tolist()

# Define a function to query OpenStreetMap for various amenities around given coordinates within a certain radius
def query_osm_around_coordinates(latitude, longitude, radius):
    # Initialize the Overpass API client
    api = overpy.Overpass()

    # Define the Overpass QL query. This queries for nodes, ways, and relations tagged with "shop", "amenity", or "leisure" within the radius of the provided coordinates
    overpass_query = f"""
    [out:json][timeout:25];
    (
      nwr["shop"](around:{radius},{latitude},{longitude});
      nwr["amenity"](around:{radius},{latitude},{longitude});
      nwr["leisure"](around:{radius},{latitude},{longitude});
    );
    out center;
    """
    # Send the query and get the result
    result = api.query(overpass_query)
    return result

# Set the search radius in meters
radius = 1000

# Initialize an empty list to store the results
facilities = []

# For each coordinate, query the facilities around it and append to the list
for lat, lon in coordinates:
    osm_data = query_osm_around_coordinates(lat, lon, radius)
    for node in osm_data.nodes:
        # Extract details for each facility around the coordinate
        facility = {
            'charger_latitude': lat,
            'charger_longitude': lon,
            'name': node.tags.get('name'),
            'type': node.tags.get('amenity') or node.tags.get('shop') or node.tags.get('leisure'),
            'latitude': node.lat,
            'longitude': node.lon
        }

        # Append each facility's details to the list
        facilities.append(facility)

# Create a DataFrame with the facilities
facilities_df = pd.DataFrame(facilities)

# Save the DataFrame to a new CSV file
facilities_df.to_csv('facilities_around_coordinates.csv', index=False)